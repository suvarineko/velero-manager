apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "velero-manager.fullname" . }}
  labels:
    {{- include "velero-manager.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "velero-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "velero-manager.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "velero-manager.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: VELERO_NAMESPACE
              value: {{ .Values.velero.namespace | quote }}
            - name: VELERO_DEFAULT_BACKUP_TTL
              value: {{ .Values.velero.defaultBackupTTL | quote }}
            - name: BACKUP_STORAGE_LOCATION
              value: {{ .Values.velero.backupStorageLocation | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.app.logLevel | quote }}
            - name: DEV_MODE
              value: {{ .Values.app.devMode | quote }}
            - name: PYTHONPATH
              value: "/app/src"
            {{- if .Values.app.extraEnv }}
            {{- range $key, $value := .Values.app.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.app.extraEnvFrom }}
            envFrom:
            {{- range .Values.app.extraEnvFrom }}
            - {{ . | toYaml | nindent 14 }}
            {{- end }}
            {{- end }}
          command:
            - streamlit
            - run
            - src/main.py
            - --server.port={{ .Values.service.targetPort }}
            - --server.address=0.0.0.0
            {{- if .Values.app.extraArgs }}
            {{- range .Values.app.extraArgs }}
            - {{ . }}
            {{- end }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /_stcore/health
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /_stcore/health
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /app/data
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecar.enabled }}
        - name: {{ .Values.sidecar.name }}
          securityContext:
            {{- toYaml .Values.sidecar.securityContext | nindent 12 }}
          image: "{{ .Values.sidecar.image.repository }}:{{ .Values.sidecar.image.tag }}"
          imagePullPolicy: {{ .Values.sidecar.image.pullPolicy }}
          {{- if .Values.sidecar.command }}
          command:
            {{- toYaml .Values.sidecar.command | nindent 12 }}
          {{- end }}
          {{- if .Values.sidecar.args }}
          args:
            {{- toYaml .Values.sidecar.args | nindent 12 }}
          {{- end }}
          {{- if .Values.sidecar.env }}
          env:
            {{- range $key, $value := .Values.sidecar.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.sidecar.ports }}
          ports:
            {{- toYaml .Values.sidecar.ports | nindent 12 }}
          {{- end }}
          {{- if .Values.sidecar.resources }}
          resources:
            {{- toYaml .Values.sidecar.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.sidecar.volumeMounts }}
          volumeMounts:
            {{- toYaml .Values.sidecar.volumeMounts | nindent 12 }}
          {{- end }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "velero-manager.fullname" . }}
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "velero-manager.fullname" . }}-data
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}